# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['DatasetAnalysis', 'SpectronautProcessor']

# %% ../nbs/00_core.ipynb 3
class DatasetAnalysis():
    """Class to store common functions
    for the analysis of proteomics data"""
    pass

# %% ../nbs/00_core.ipynb 4
class SpectronautProcessor(DatasetAnalysis):
    def __init__(self, file_name='', column_mapping=''):
        self.filename = file_name
        self.column_mapping = self.parse_column_mapping(column_mapping)
        
        
    def filter_protein_quantification(self, df):
        """
        This function prpare the Spectronaut oupt for 
        analysis. Filters out low quality hits and return
        a dataframe
        """
        quant_cols = [n for n in df.columns if 'PG.Quantity' in n]
        
        #grab the columns IsSingleHit
        mask = df[[n.replace('PG.Quantity','PG.IsSingleHit') for n in quant_cols]]
        #change the names to the 
        #quant columns to apply a mask
        mask.columns = quant_cols
            
        #apply the conditions for mask
        #if the protein has been filtered
        mask=mask.replace('Filtered', True)
        
        #if it's not a single hit we leave it alone
        mask=mask.replace('False', False)
        mask=mask.replace('FALSE', False)
        
        #if the protein is a single hit 
        mask=mask.replace('True', True)
        mask=mask.replace('TRUE', True)
        
        #finally get the data dataframe 
        #and apply the task
        selection = df[quant_cols]
        selection = selection.mask(mask)
        return selection
    
    def parse_column_mapping(self, mapping_file):
        mapping_df = pd.read_csv(mapping_file,sep='\t')
        assert mapping_df.shape[1]==3
        #user might have used different columns sets
        #we make sure that we use the quntification
        #columns
        mapping_df['col_name']=[n.replace('.IsSingleHit','.Quantity') for n in mapping_df['col_name']]
        mapping_df['new_col']=mapping_df['condition']+'.'+mapping_df['replica'].astype(str)
        mapping_dict = dict(zip(mapping_df['col_name'], mapping_df['new_col']))
        return mapping_dict
        
    def process(self):
        df = pd.read_csv(self.filename, sep="\t")
        filtered_quantification = self.filter_protein_quantification(df)
        filtered_quantification = filtered_quantification.rename(self.column_mapping,axis=1)
        return filtered_quantification

